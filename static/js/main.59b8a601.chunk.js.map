{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","titleFilter","selected","shuffle","props","preparedTodos","sort","Math","random","setState","reset","a","b","id","this","selectedUserId","selectUser","completeToggle","filteredTodos","filter","todo","title","toLowerCase","includes","completed","className","type","name","value","onChange","event","target","onClick","map","classNames","readOnly","checked","userId","React","Component","getUser","fetch","then","response","json","CurrentUser","user","email","phone","prevProps","clear","PureComponent","App","todosFromServer","resetUserId","completeChanger","todoId","todos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.59b8a601.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  preparedTodos: Todo[];\n  selectUser: (id: number | null) => void;\n  selectedUserId: number | null;\n  completeToggle: (todoId: number) => void;\n};\n\ntype State = {\n  titleFilter: string,\n  selected: string,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state = {\n    titleFilter: '',\n    selected: 'all',\n  };\n\n  shuffle = () => {\n    this.props.preparedTodos.sort(() => Math.random() - 0.5);\n    this.setState({});\n  };\n\n  reset = () => {\n    this.setState({ selected: 'all', titleFilter: '' });\n    this.props.preparedTodos.sort((a, b) => a.id - b.id);\n  };\n\n  render() {\n    const {\n      selectedUserId,\n      preparedTodos,\n      selectUser,\n      completeToggle,\n    } = this.props;\n\n    const { titleFilter, selected } = this.state;\n\n    const filteredTodos = preparedTodos.filter(\n      (todo) => todo.title.toLowerCase().includes(titleFilter.toLowerCase()) && (\n        selected === 'completed' ? (\n          todo.completed === true\n        ) : (\n          todo.completed === false\n        )\n        || selected === 'all'\n      ),\n    );\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"TodoList__list-container\">\n          <input\n            type=\"text\"\n            name=\"titleFilter\"\n            value={this.state.titleFilter}\n            onChange={(event) => this.setState({ titleFilter: event.target.value })}\n          />\n\n          <select\n            name=\"selected\"\n            onChange={(event) => this.setState({ selected: event.target.value })}\n            value={this.state.selected}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"completed\">Completed</option>\n            <option value=\"active\">Active</option>\n          </select>\n\n          <button\n            type=\"button\"\n            onClick={this.shuffle}\n          >\n            shuffle\n          </button>\n\n          <button\n            type=\"button\"\n            onClick={this.reset}\n          >\n            reset\n          </button>\n\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <li\n                className={\n                  classNames('TodoList__item',\n                    { 'TodoList__item--unchecked': !todo.completed })\n                }\n                key={todo.id}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked={todo.completed}\n                    onClick={() => completeToggle(todo.id)}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                {todo.userId && (\n                  <button\n                    className={\n                      classNames('TodoList__user-button', 'button',\n                        { 'TodoList__user-button--selected': todo.userId === selectedUserId })\n                    }\n                    onClick={() => selectUser(todo.userId)}\n                    type=\"button\"\n                  >\n                    {todo.userId}\n                  </button>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","// eslint-disable-next-line\nconst API_URL = `https://mate.academy/students-api/todos`;\n\nexport function getTodos(): Promise<Todo[]> {\n  return fetch(API_URL)\n    .then(response => response.json());\n}\n\nconst USER_API_URL = 'https://mate.academy/students-api/users/';\n\nexport function getUser(id: number | null): Promise<User> {\n  return fetch(`${USER_API_URL}${id}`)\n    .then(response => response.json());\n}\n","/* eslint-disable react/no-unused-state */\nimport React from 'react';\nimport { getUser } from '../../api/api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number | null;\n  clear: () => void;\n};\n\ntype State = {\n  user: User | null;\n};\n\nexport class CurrentUser extends React.PureComponent <Props, State> {\n  state = {\n    user: {\n      name: '',\n      id: 0,\n      email: '',\n      phone: '',\n    },\n  };\n\n  componentDidMount() {\n    getUser(this.props.userId)\n      .then((user) => {\n        this.setState({ user });\n      });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      getUser(this.props.userId)\n        .then((user) => {\n          this.setState({ user });\n        });\n    }\n  }\n\n  render() {\n    const {\n      id,\n      phone,\n      email,\n      name,\n    } = this.state.user;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          {`User #${id}`}\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">\n          {name}\n        </h3>\n        <p className=\"CurrentUser__email\">\n          {email}\n        </p>\n        <p className=\"CurrentUser__phone\">\n          {phone}\n        </p>\n\n        <button\n          type=\"button\"\n          onClick={this.props.clear}\n        >\n          clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\ninterface State {\n  selectedUserId: number | null;\n  todosFromServer: Todo[];\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todosFromServer: [],\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then(todos => {\n        this.setState({ todosFromServer: todos });\n      });\n  }\n\n  selectUser = (id:number | null) => {\n    this.setState({ selectedUserId: id });\n  };\n\n  resetUserId = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  completeChanger = (todoId: number) => {\n    this.setState(state => ({\n      todosFromServer: [\n        ...state.todosFromServer.map((todo) => {\n          if (todo.id === todoId) {\n            const newTodo = {\n              ...todo,\n              completed: !todo.completed,\n            };\n\n            return newTodo;\n          }\n\n          return todo;\n        }),\n      ],\n    }));\n  };\n\n  render() {\n    const { selectedUserId, todosFromServer } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            preparedTodos={todosFromServer}\n            selectUser={this.selectUser}\n            selectedUserId={selectedUserId}\n            completeToggle={this.completeChanger}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} clear={this.resetUserId} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}