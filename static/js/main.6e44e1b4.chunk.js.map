{"version":3,"sources":["components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoItem","todo","selectUser","userId","completeToggle","className","classNames","completed","type","readOnly","checked","onClick","title","TodoList","state","titleFilter","selected","shuffle","props","preparedTodos","sort","Math","random","setState","reset","a","b","id","changeToggler","event","target","name","value","this","selectedUserId","filteredTodos","filter","toLowerCase","includes","onChange","map","React","Component","getUser","fetch","then","response","json","CurrentUser","user","phone","email","clear","PureComponent","App","todosFromServer","resetUserId","completeChanger","changedTodo","todos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6e44e1b4.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  todo: Todo;\n  selectUser: (id: number | null) => void;\n  userId: number | null;\n  completeToggle: (todo: Todo) => void;\n};\n\nexport const TodoItem: React.FC<Props> = (\n  {\n    todo,\n    selectUser,\n    userId,\n    completeToggle,\n  },\n) => (\n  <li\n    className={\n      classNames('TodoList__item',\n        { 'TodoList__item--unchecked': !todo.completed })\n    }\n  >\n    <label>\n      <input\n        type=\"checkbox\"\n        readOnly\n        checked={todo.completed}\n        onClick={() => completeToggle(todo)}\n      />\n      <p>{todo.title}</p>\n    </label>\n\n    {todo.userId && (\n      <button\n        className={\n          classNames('TodoList__user-button', 'button',\n            { 'TodoList__user-button--selected': todo.userId === userId })\n        }\n        onClick={() => selectUser(todo.userId)}\n        type=\"button\"\n      >\n        {todo.userId}\n      </button>\n    )}\n  </li>\n);\n","import React from 'react';\nimport './TodoList.scss';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\ntype Props = {\n  preparedTodos: Todo[];\n  selectUser: (id: number | null) => void;\n  selectedUserId: number | null;\n  completeToggle: (todo: Todo) => void;\n};\n\ntype State = {\n  titleFilter: string,\n  selected: string,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state = {\n    titleFilter: '',\n    selected: 'all',\n  };\n\n  shuffle = () => {\n    this.props.preparedTodos.sort(() => Math.random() - 0.5);\n    this.setState({});\n  };\n\n  reset = () => {\n    this.setState({ selected: 'all', titleFilter: '' });\n    this.props.preparedTodos.sort((a, b) => a.id - b.id);\n  };\n\n  changeToggler = (\n    event:React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    if (name === 'selected') {\n      this.setState({ selected: value });\n    }\n\n    if (name === 'titleFilter') {\n      this.setState({ titleFilter: value });\n    }\n  };\n\n  render() {\n    const {\n      selectedUserId,\n      preparedTodos,\n      selectUser,\n      completeToggle,\n    } = this.props;\n\n    const { titleFilter, selected } = this.state;\n\n    let filteredTodos = preparedTodos.filter(\n      (todo) => todo.title.toLowerCase().includes(titleFilter.toLowerCase()),\n    );\n\n    switch (selected) {\n      case 'active':\n        filteredTodos = filteredTodos.filter(todo => todo.completed === false);\n        break;\n      case 'completed':\n        filteredTodos = filteredTodos.filter(todo => todo.completed === true);\n        break;\n      default:\n        break;\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"TodoList__list-container\">\n          <input\n            type=\"text\"\n            name=\"titleFilter\"\n            value={this.state.titleFilter}\n            onChange={this.changeToggler}\n          />\n\n          <select\n            name=\"selected\"\n            onChange={this.changeToggler}\n            value={this.state.selected}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"completed\">Completed</option>\n            <option value=\"active\">Active</option>\n          </select>\n\n          <button\n            type=\"button\"\n            onClick={this.shuffle}\n          >\n            shuffle\n          </button>\n\n          <button\n            type=\"button\"\n            onClick={this.reset}\n          >\n            reset\n          </button>\n\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <TodoItem\n                key={todo.id}\n                todo={todo}\n                completeToggle={completeToggle}\n                userId={selectedUserId}\n                selectUser={selectUser}\n              />\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","// eslint-disable-next-line\nconst API_URL = `https://mate.academy/students-api/todos`;\n\nexport function getTodos(): Promise<Todo[]> {\n  return fetch(API_URL)\n    .then(response => response.json());\n}\n\nconst USER_API_URL = 'https://mate.academy/students-api/users/';\n\nexport function getUser(id: number | null): Promise<User> {\n  return fetch(`${USER_API_URL}${id}`)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport { getUser } from '../../api/api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number | null;\n  clear: () => void;\n};\n\ntype State = {\n  user: User | null;\n};\n\nexport class CurrentUser extends React.PureComponent <Props, State> {\n  state = {\n    user: null,\n  };\n\n  componentDidMount() {\n    getUser(this.props.userId)\n      .then((user) => {\n        this.setState({ user });\n      });\n  }\n\n  componentDidUpdate() {\n    getUser(this.props.userId)\n      .then((user) => {\n        this.setState({ user });\n      });\n  }\n\n  render() {\n    if (this.state.user) {\n      const {\n        id,\n        phone,\n        email,\n        name,\n      } = this.state.user;\n\n      return (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            {`User #${id}`}\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">\n            {name}\n          </h3>\n          <p className=\"CurrentUser__email\">\n            {email}\n          </p>\n          <p className=\"CurrentUser__phone\">\n            {phone}\n          </p>\n\n          <button\n            type=\"button\"\n            onClick={this.props.clear}\n          >\n            clear\n          </button>\n        </div>\n      );\n    }\n\n    return '';\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\ninterface State {\n  selectedUserId: number | null;\n  todosFromServer: Todo[];\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todosFromServer: [],\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then(todos => {\n        this.setState({ todosFromServer: todos });\n      });\n  }\n\n  selectUser = (id:number | null) => {\n    this.setState({ selectedUserId: id });\n  };\n\n  resetUserId = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  completeChanger = (todo: Todo) => {\n    const changedTodo = todo;\n\n    changedTodo.completed = !changedTodo.completed;\n\n    this.setState(state => {\n      return {\n        todosFromServer: [\n          ...state.todosFromServer,\n        ],\n      };\n    });\n  };\n\n  render() {\n    const { selectedUserId, todosFromServer } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            preparedTodos={todosFromServer}\n            selectUser={this.selectUser}\n            selectedUserId={selectedUserId}\n            completeToggle={this.completeChanger}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} clear={this.resetUserId} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}