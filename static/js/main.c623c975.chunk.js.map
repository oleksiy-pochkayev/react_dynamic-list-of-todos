{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","titleFilter","selected","shuffle","setState","reset","this","props","selectedUserId","preparedTodos","selectUser","filteredTodos","filter","todo","title","toLowerCase","includes","completed","sort","Math","random","className","type","name","value","onChange","event","target","onClick","map","classNames","readOnly","checked","userId","id","React","Component","getUser","fetch","then","response","json","CurrentUser","user","email","phone","prevProps","clear","PureComponent","App","todosFromServer","resetUserId","todos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c623c975.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  preparedTodos: Todo[];\n  selectUser: (id: number | null) => void;\n  selectedUserId: number | null;\n};\n\ntype State = {\n  titleFilter: string,\n  selected: string,\n  shuffle: boolean,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state = {\n    titleFilter: '',\n    selected: 'all',\n    shuffle: false,\n  };\n\n  shuffle = () => {\n    this.setState({ shuffle: true });\n  };\n\n  reset = () => {\n    this.setState({ shuffle: false, selected: 'all', titleFilter: '' });\n  };\n\n  render() {\n    const { selectedUserId, preparedTodos, selectUser } = this.props;\n    const { titleFilter, selected, shuffle } = this.state;\n\n    let filteredTodos = preparedTodos.filter(\n      (todo) => todo.title.toLowerCase().includes(titleFilter.toLowerCase()) && (\n        selected === 'completed' ? (\n          todo.completed === true\n        ) : (\n          todo.completed === false\n        )\n        || selected === 'all'\n      ),\n    );\n\n    if (shuffle) {\n      filteredTodos = filteredTodos.sort(() => Math.random() - 0.5);\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"TodoList__list-container\">\n          <input\n            type=\"text\"\n            name=\"titleFilter\"\n            value={this.state.titleFilter}\n            onChange={(event) => this.setState({ titleFilter: event.target.value })}\n          />\n\n          <select\n            name=\"selected\"\n            onChange={(event) => this.setState({ selected: event.target.value })}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"completed\">Completed</option>\n            <option value=\"active\">Active</option>\n          </select>\n\n          <button\n            type=\"button\"\n            onClick={this.shuffle}\n          >\n            shuffle\n          </button>\n\n          <button\n            type=\"button\"\n            onClick={this.reset}\n          >\n            reset\n          </button>\n\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <li\n                className={\n                  classNames('TodoList__item',\n                    { 'TodoList__item--unchecked': !todo.completed })\n                }\n                key={todo.id}\n              >\n                <label>\n                  <input type=\"checkbox\" readOnly checked={todo.completed} />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={\n                    classNames('TodoList__user-button', 'button',\n                      { 'TodoList__user-button--selected': todo.userId === selectedUserId })\n                  }\n                  onClick={() => selectUser(todo.userId)}\n                  type=\"button\"\n                >\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","// eslint-disable-next-line\nconst API_URL = `https://mate.academy/students-api/todos`;\n\nexport function getTodos(): Promise<Todo[]> {\n  return fetch(API_URL)\n    .then(response => response.json());\n}\n\nconst USER_API_URL = 'https://mate.academy/students-api/users/';\n\nexport function getUser(id: number | null): Promise<User> {\n  return fetch(`${USER_API_URL}${id}`)\n    .then(response => response.json());\n}\n","/* eslint-disable react/no-unused-state */\nimport React from 'react';\nimport { getUser } from '../../api/api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number | null;\n  clear: () => void;\n};\n\ntype State = {\n  user: User | null;\n};\n\nexport class CurrentUser extends React.PureComponent <Props, State> {\n  state = {\n    user: {\n      name: '',\n      id: 0,\n      email: '',\n      phone: '',\n    },\n  };\n\n  componentDidMount() {\n    getUser(this.props.userId)\n      .then((user) => {\n        this.setState({ user });\n      });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      getUser(this.props.userId)\n        .then((user) => {\n          this.setState({ user });\n        });\n    }\n  }\n\n  render() {\n    const {\n      id,\n      phone,\n      email,\n      name,\n    } = this.state.user;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          {`User #${id}`}\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">\n          {name}\n        </h3>\n        <p className=\"CurrentUser__email\">\n          {email}\n        </p>\n        <p className=\"CurrentUser__phone\">\n          {phone}\n        </p>\n\n        <button\n          type=\"button\"\n          onClick={this.props.clear}\n        >\n          clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\ninterface State {\n  selectedUserId: number | null;\n  todosFromServer: Todo[];\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todosFromServer: [],\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then(todos => {\n        this.setState({ todosFromServer: todos });\n      });\n  }\n\n  selectUser = (id:number | null) => {\n    this.setState({ selectedUserId: id });\n  };\n\n  resetUserId = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { selectedUserId, todosFromServer } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            preparedTodos={todosFromServer}\n            selectUser={this.selectUser}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} clear={this.resetUserId} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}